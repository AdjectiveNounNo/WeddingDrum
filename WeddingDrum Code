#include "FastLED.h"

#define LED_PIN     4
#define LED_TYPE    WS2812
#define COLOR_ORDER GRB
#define NUM_LEDS    57
CRGB leds[NUM_LEDS];
#define MASTER_BRIGHTNESS   255
// Base background color
#define BASE_COLOR       CRGB(24,0,24)
//off state
#define OFF_COLOR CRGB(0,0,0)
// Peak color to twinkle up to
#define PEAK_COLOR       CRGB(255,0,255)
//set to brighten up a bit faster than it dims down
// Amount to increment the color by each loop as it gets brighter:
#define DELTA_COLOR_UP   CRGB(10,0,10)
// Amount to decrement the color by each loop as it gets dimmer:
#define DELTA_COLOR_DOWN CRGB(1,0,1)
// Chance of each pixel starting to brighten up.  
// 1 or 2 = a few brightening pixels at a time.
// 10 = lots of pixels brightening at a time.
#define CHANCE_OF_TWINKLE 1
#define SENSOR_PIN 3
int smlhrt[]={12,18,21,26,30,34,36,37,39,42,43,45,46};
int lrghrt[]={1,5,6,10,14,17,22,25,31,33,40,41,44,47,48,49,50,51,52,53};

void setup() {
  pinMode(3, INPUT_PULLUP);
  attachInterrupt(1, Letter, FALLING);
  delay(3000);
  FastLED.addLeds<LED_TYPE,LED_PIN,COLOR_ORDER>(leds, NUM_LEDS).setCorrection(TypicalLEDStrip);
  FastLED.setBrightness(MASTER_BRIGHTNESS);
  InitPixelStates();
  
  
}

void Letter()
{
  offPixelStates();
  delay(500);
  for(int i=1;i<=25;i++){
    stpincrease(smlhrt,5);
    FastLED.show();
    delay(10);
  }
  for(int j=0;j<3;j++){
    for(int i=1;i<=25;i++){
      for(int p=0;sizeof(smlhrt);p++){
        stpincrease(smlhrt[p],5);
      }
      for(int p=0;sizeof(lrghrt);p++){
        stpincrease(lrghrt[p],10);
      }
      FastLED.show();
      delay(10);
    }
    for(int i=1;i<=25;i++){
      for(int p=0;sizeof(smlhrt);p++){
        stpincrease(smlhrt[p],-5);
      }
      for(int p=0;sizeof(lrghrt);p++){
        stpincrease(lrghrt[p],-10);
      }
      FastLED.show();
      delay(20);
    }
  }
  InitPixelStates();
  TwinkleMapPixels();
}
void stpincrease(int L, int stp){

  int r=leds[L].red;
  int b=leds[L].blue;
  leds[L]=CRGB(r+stp,0,b+stp);
}

void loop()
{
  TwinkleMapPixels();
  FastLED.show();  
  FastLED.delay(20);
}

enum { SteadyDim, GettingBrighter, GettingDimmerAgain };
uint8_t PixelState[NUM_LEDS];

void InitPixelStates()
{
  memset( PixelState, sizeof(PixelState), SteadyDim); // initialize all the pixels to SteadyDim.
  fill_solid( leds, NUM_LEDS, BASE_COLOR);
}
void offPixelStates()
{
  memset( PixelState, sizeof(PixelState), SteadyDim); // initialize all the pixels to SteadyDim.
  fill_solid( leds, NUM_LEDS, OFF_COLOR);
}
void TwinkleMapPixels()
{
  for( uint16_t i = 0; i < NUM_LEDS; i++) {
    if( PixelState[i] == SteadyDim) {
      // this pixels is currently: SteadyDim
      // so we randomly consider making it start getting brighter
      if( random8() < CHANCE_OF_TWINKLE) {
        PixelState[i] = GettingBrighter;
      }
      
    } else if( PixelState[i] == GettingBrighter ) {
      // this pixels is currently: GettingBrighter
      // so if it's at peak color, switch it to getting dimmer again
      if( leds[i] >= PEAK_COLOR ) {
        PixelState[i] = GettingDimmerAgain;
      } else {
        // otherwise, just keep brightening it:
        leds[i] += DELTA_COLOR_UP;
      }
      
    } else { // getting dimmer again
      // this pixels is currently: GettingDimmerAgain
      // so if it's back to base color, switch it to steady dim
      if( leds[i] <= BASE_COLOR ) {
        leds[i] = BASE_COLOR; // reset to exact base color, in case we overshot
        PixelState[i] = SteadyDim;
      } else {
        // otherwise, just keep dimming it down:
        leds[i] -= DELTA_COLOR_DOWN;
      }
    }
  }
}
